#! /bin/bash
# makes a plotting script from data files
# this file is part of FormCalc
# last modified 26 Jan 18 th

# This program works in two steps:
#
# First, it generates a script called "file.gpl", if "file" was the
# original file name.  This script contains an invocation of gnuplot 
# with a lot of plotting parameters pre-set to reasonable values.
#
# It then executes the newly created .gpl script to produce a rough
# version of the .eps file.  This is done by letting gnuplot produce
# its output in "pslatex" format and running this output through
# LaTeX and dvips -E to produce the actual .eps figure.
#
# The draft version of the .gpl script made by pnuglot can now be
# edited to fine-tune the plotting parameters.  Run the .gpl script
# (not pnuglot!) again for the changes to take effect.


out=
files=()
plotfmt=($' \\\n  "%s"' ' u 1:2 t "tree"' $', \\\n  ""' ' u 1:($2+$3) t "loop"')

while test $# -gt 0 ; do
  case $1 in
  -o)	out="${2%.gpl}.gpl"
	shift
	;;
  -2)	plotfmt[2]= plotfmt[3]=
	;;
  -3)	plotfmt[1]= plotfmt[2]=
	;;
  *)	file="$1"
	test -d "$file" && {
	  "${0%/*}" "$file" || exit 1
	  file="${file%%/}.data"
	}
	[[ `file --mime-type "$file"` =~ *(postscript|pdf) ]] && {
	  echo "ignored: $file"
	} || {
	  files+=("$file")
	  test -z "$out" && out="${file%.data}.gpl"
	}
	;;
  esac
  shift
done

test "${#files[@]}" -eq 0 && {
  cat << _EOF_
Usage:  $0 [-2] [-3] [-o outfile] datafile(s)
Plots datafile(s) with gnuplot.  The options are:
  -2             uses only columns 1:2 for plotting
  -3             uses only columns 1:3 for plotting
  -o outfile     gives the name of the output file
_EOF_
  exit 1
}


cat << \_TEMPLATE_ > $out
#! /bin/bash

trap "rm -f tmpgpl.*" 0 1 2 3 15

gnuplot << \_EOF_

# ----- The gnuplot commands start here -----

set term pslatex color solid
# if you want black lines in different dash styles rather than
# solid lines in different colors, remove the "color solid" above

set output "tmpgpl.pslatex"
set lmargin 10
set rmargin 4
set tmargin 0
set bmargin 2

set size 1,1.1
set key spacing 2
set tics scale .6

#set title "Cross-section"

set format y '$%g$'
# for a log axis, use
#set logscale y
#set format y '$10^{%T}$'

set label '[l]{$\sqrt s$/GeV}' at graph 1.05,0
# looks better than set xlabel '...'

set label '[tr]{$\sigma$/pb}' at graph -.15,.95
# looks better than set ylabel '...'

set style data lines

_TEMPLATE_

IFS= eval 'printf -v plotcmd "${plotfmt[*]}" "${files[@]}"'
echo "plot$plotcmd" >> $out

cat << \_TEMPLATE_ >> $out

# ----- The gnuplot commands end here -----

_EOF_

cat << \_EOF_ > tmpgpl.tex
\documentclass[11pt]{article}
\usepackage{amsmath}
\textwidth=500bp
\oddsidemargin=0bp
\evensidemargin=0bp
\parindent=0bp
\pagestyle{empty}
\begin{document}
_EOF_

sed /endinput/d tmpgpl.pslatex >> tmpgpl.tex

echo '\end{document}' >> tmpgpl.tex

base="${0%.gpl}"
latex tmpgpl.tex
dvips -Ppdf -E -o "$base.eps" tmpgpl.dvi
epstopdf "$base.eps"

open=xdg-open
case `uname` in
Darwin) open=open ;;
CYG*) open=cygstart ;;
esac
$open "$base.pdf"

_TEMPLATE_

chmod 755 "$out"
exec `dirname "$out"`/`basename "$out"`

