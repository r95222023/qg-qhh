* inline.h
* inline util functions and computation of numerators
* Caveat: this is the Fortran 77 version -
* MUST have #define SIMD 0 in distrib.h
* this file is part of FormCalc
* last modified 17 Jun 16 th


#ifndef INLINE_H
#define INLINE_H

#define SpiLV(iL,eL) (1-2*eL)*Vec(1+eL,1+eL,iL), Vec(2-eL,1+eL,iL)
#define SpiLB(iL,eL) (1-2*eL)*Vec(1+eL,2-eL,iL), Vec(2-eL,2-eL,iL)
#define SpiRV(eR,iR) Vec(1+eR,1+eR,iR), (1-2*eR)*Vec(2-eR,1+eR,iR)
#define SpiRB(eR,iR) Vec(1+eR,2-eR,iR), (1-2*eR)*Vec(2-eR,2-eR,iR)

#ifdef NINJA

#define NumFunction(f) subroutine f(ncut, q1in, MuTildeSq, res)
#define Result(f) res
#define MuExpFunction(f) subroutine f(ncut, vTin, njcoeff)
#define T3ExpFunction(f) subroutine f(ncut, v0in, v3in, v4in, para, mindeg, njcoeff)
#define T3ExpCoeff(d,m) if( d .gt. mindeg ) return
* i.e. coefficient of tnj^(rank-d) MuTildeSq^m
#define T2ExpFunction(f) subroutine f(ncut, v1in, v2in, v3in, v4in, para, mindeg, njcoeff)
#define T2ExpCoeff(d,x,m) if( d .gt. mindeg ) return
* i.e. coefficient of tnj^(rank-d) xnj^x MuTildeSq^m
#define CNNum CNum
#define b0nj para(1)
#define b1nj para(2)
#define b2nj para(3)

#elif defined SAMURAI

#define NumFunction(f) function f(ncut, q1in, MuTildeSq)
#define Result(f) f
#define CSNum CNum

#elif defined CUTTOOLS

#define NumFunction(f) subroutine f(q1in, res)
#define Result(f) res
#define CCNum CNum

#endif

#if NUMDEBUG > 1
#define NumDebug(f) \
print '(A,/4G14.5,A/4G14.5/)', f, \
  Re(q1in), " q1", Im(q1in)
#define MuExpDebug(f) \
print '(A/4G14.5,A/4G14.5/)', f, \
  Re(vTin), " vT", Im(vTin)
#define T3ExpDebug(f) \
print '(A," mindeg ",I1,3(/4G14.5,A/4G14.5/))', f, mindeg, \
  Re(v0in), " v0", Im(v0in), \
  Re(v3in), " v3", Im(v3in), \
  Re(v4in), " v4", Im(v4in)
#define T2ExpDebug(f) \
print '(A," mindeg ",I1,4(/4G14.5,A/4G14.5/))', f, mindeg, \
  Re(v1in), " v1", Im(v1in), \
  Re(v2in), " v2", Im(v2in), \
  Re(v3in), " v3", Im(v3in), \
  Re(v4in), " v4", Im(v4in)
#elif NUMDEBUG == 1
#define NumDebug(f) print '(A)', f
#define MuExpDebug(f) print '(A)', f
#define T3ExpDebug(f) print '(A," mindeg ",I1)', f, mindeg
#define T2ExpDebug(f) print '(A," mindeg ",I1)', f, mindeg
#else
#define NumDebug(f)
#define MuExpDebug(f)
#define T3ExpDebug(f)
#define T2ExpDebug(f)
#endif

#else

CNNum	integer ncut
CNNum	ComplexType q1in(0:3)
CNNum	ComplexType MuTildeSq

CSNum	integer ncut
CSNum	ComplexType q1in(4)
CSNum	RealType MuTildeSq

CCNum	ComplexType q1in(0:3)

CMuExp	integer ncut
CMuExp	ComplexType vTin(0:3)

CT3Exp	integer ncut, mindeg
CT3Exp	ComplexType v0in(0:3)
CT3Exp	ComplexType v3in(0:3)
CT3Exp	ComplexType v4in(0:3)
CT3Exp	ComplexType para(*)

CT2Exp	integer ncut, mindeg
CT2Exp	ComplexType v1in(0:3)
CT2Exp	ComplexType v2in(0:3)
CT2Exp	ComplexType v3in(0:3)
CT2Exp	ComplexType v4in(0:3)
CT2Exp	ComplexType para(*)

	integer IndexDelta, IndexSign, IndexEps
	RealType Sq, SqDiff, ThreeMom, SInvariant, TInvariant
	ComplexType Pair, Eps_, Eps
	ComplexType SxS
	ComplexType SxV1, SxV2, SxB1, SxB2
	ComplexType VxS1, VxS2, BxS1, BxS2
	ComplexType SxVxB1, SxVxB2, SxBxV1, SxBxV2
	ComplexType BxVxS1, BxVxS2, VxBxS1, VxBxS2
	ComplexType SxVxBxV1, SxVxBxV2, SxBxVxB1, SxBxVxB2
	ComplexType VxBxVxS1, VxBxVxS2, BxVxBxS1, BxVxBxS2
	ComplexType SxVxBxVxB1, SxVxBxVxB2, SxBxVxBxV1, SxBxVxBxV2
	ComplexType BxVxBxVxS1, BxVxBxVxS2, VxBxVxBxS1, VxBxVxBxS2
	ComplexType ChainV0, ChainB0
	ComplexType ChainV1, ChainB1
	ComplexType ChainV2, ChainB2
	ComplexType ChainV3, ChainB3
	ComplexType ChainV4, ChainB4
	ComplexType ChainV5, ChainB5
	ComplexType ChainV6, ChainB6
	ComplexType ChainV7, ChainB7
	ComplexType ChainV8, ChainB8

	ComplexType l1_, l2_, r1_, r2_
	integer a_, b_, c_, d_, e_, f_, g_, h_
	integer iL_, iR_, eL_, eR_
	RealType sqrtS_, ma_, mb_
	ComplexType z_

	integer BitCount
	integer*8 h_, bc2, bc4, bc8
	bc2(h_) = h_ - iand(ishft(h_, -1), int8(Z'5555555555555555'))
	bc4(h_) = iand(h_, int8(Z'3333333333333333')) +
     &    iand(ishft(h_, -2), int8(Z'3333333333333333'))
	bc8(h_) = iand(h_ + ishft(h_, -4), int8(Z'0F0F0F0F0F0F0F0F'))
	BitCount(h_) = int(ishft(
     &    bc8(bc4(bc2(h_)))*int8(Z'0101010101010101'), -56 ))

	Sq(z_) = Re(z_*Conjugate(z_))

	IndexDelta(a_, b_) = 1 - signbit(ieor(a_ - b_, b_ - a_))

	IndexSign(a_) = signbit(ior(a_, -a_)) - 2*signbit(a_)
	IndexEps(a_, b_, c_) =
     &    IndexSign(a_ - b_)*IndexSign(c_ - b_)*IndexSign(a_ - c_)

	SqDiff(ma_, mb_) = (ma_ - mb_)*(ma_ + mb_)
	ThreeMom(sqrtS_, ma_, mb_) = sqrt(SqDiff(
     &    .5D0*(sqrtS_ - SqDiff(ma_, mb_)/sqrtS_), mb_ ))

	SInvariant(a_, b_) =
     &    (Re(vec0(1,1,k0(a_))) + Re(vec0(1,1,k0(b_))))*
     &    (Re(vec0(2,2,k0(a_))) + Re(vec0(2,2,k0(b_)))) -
     &    Sq(vec0(1,2,k0(a_)) + vec0(1,2,k0(b_)))

	TInvariant(a_, b_) =
     &    (Re(vec0(1,1,k0(a_))) - Re(vec0(1,1,k0(b_))))*
     &    (Re(vec0(2,2,k0(a_))) - Re(vec0(2,2,k0(b_)))) -
     &    Sq(vec0(1,2,k0(a_)) - vec0(1,2,k0(b_)))

	Pair(a_, b_) = .5D0*(
     &    Vec(1,1,a_)*Vec(2,2,b_) + Vec(2,2,a_)*Vec(1,1,b_) -
     &    Vec(1,2,a_)*Vec(2,1,b_) - Vec(2,1,a_)*Vec(1,2,b_) )

	Eps_(a_, b_, c_, d_) =
     &    (Vec(1,1,a_)*Vec(2,2,b_) - Vec(2,2,a_)*Vec(1,1,b_))*
     &    (Vec(2,1,c_)*Vec(1,2,d_) - Vec(1,2,c_)*Vec(2,1,d_))
	Eps(a_, b_, c_, d_) = .25D0*(
     &    Eps_(a_, b_, c_, d_) + Eps_(c_, d_, a_, b_) -
     &    Eps_(a_, c_, b_, d_) - Eps_(b_, d_, a_, c_) +
     &    Eps_(a_, d_, b_, c_) + Eps_(b_, c_, a_, d_) )

	SxS(l1_,l2_, r1_,r2_) = l1_*r1_ + l2_*r2_

	SxV1(l1_,l2_, a_) = l1_*Vec(1,1,a_) + l2_*Vec(2,1,a_)
	SxV2(l1_,l2_, a_) = l2_*Vec(2,2,a_) + l1_*Vec(1,2,a_)

	SxB1(l1_,l2_, a_) = l1_*Vec(2,2,a_) - l2_*Vec(2,1,a_)
	SxB2(l1_,l2_, a_) = l2_*Vec(1,1,a_) - l1_*Vec(1,2,a_)

	VxS1(a_, r1_,r2_) = Vec(1,1,a_)*r1_ + Vec(1,2,a_)*r2_
	VxS2(a_, r1_,r2_) = Vec(2,1,a_)*r1_ + Vec(2,2,a_)*r2_

	BxS1(a_, r1_,r2_) = Vec(2,2,a_)*r1_ - Vec(1,2,a_)*r2_
	BxS2(a_, r1_,r2_) = Vec(1,1,a_)*r2_ - Vec(2,1,a_)*r1_

	SxVxB1(l1_,l2_, a_, b_) =
     &    SxB1(SxV1(l1_,l2_, a_),SxV2(l1_,l2_, a_), b_)
	SxVxB2(l1_,l2_, a_, b_) =
     &    SxB2(SxV1(l1_,l2_, a_),SxV2(l1_,l2_, a_), b_)

	SxBxV1(l1_,l2_, a_, b_) =
     &    SxV1(SxB1(l1_,l2_, a_),SxB2(l1_,l2_, a_), b_)
	SxBxV2(l1_,l2_, a_, b_) =
     &    SxV2(SxB1(l1_,l2_, a_),SxB2(l1_,l2_, a_), b_)

	BxVxS1(b_, a_, r1_,r2_) =
     &    BxS1(b_, VxS1(a_, r1_,r2_),VxS2(a_, r1_,r2_))
	BxVxS2(b_, a_, r1_,r2_) =
     &    BxS2(b_, VxS1(a_, r1_,r2_),VxS2(a_, r1_,r2_))

	VxBxS1(b_, a_, r1_,r2_) =
     &    VxS1(b_, BxS1(a_, r1_,r2_),BxS2(a_, r1_,r2_))
	VxBxS2(b_, a_, r1_,r2_) =
     &    VxS2(b_, BxS1(a_, r1_,r2_),BxS2(a_, r1_,r2_))

	SxVxBxV1(l1_,l2_, a_, b_, c_) =
     &    SxBxV1(SxV1(l1_,l2_, a_),SxV2(l1_,l2_, a_), b_, c_)
	SxVxBxV2(l1_,l2_, a_, b_, c_) =
     &    SxBxV2(SxV1(l1_,l2_, a_),SxV2(l1_,l2_, a_), b_, c_)

	SxBxVxB1(l1_,l2_, a_, b_, c_) =
     &    SxVxB1(SxB1(l1_,l2_, a_),SxB2(l1_,l2_, a_), b_, c_)
	SxBxVxB2(l1_,l2_, a_, b_, c_) =
     &    SxVxB2(SxB1(l1_,l2_, a_),SxB2(l1_,l2_, a_), b_, c_)

	VxBxVxS1(c_, b_, a_, r1_,r2_) =
     &    VxBxS1(c_, b_, VxS1(a_, r1_,r2_),VxS2(a_, r1_,r2_))
	VxBxVxS2(c_, b_, a_, r1_,r2_) =
     &    VxBxS2(c_, b_, VxS1(a_, r1_,r2_),VxS2(a_, r1_,r2_))

	BxVxBxS1(c_, b_, a_, r1_,r2_) =
     &    BxVxS1(c_, b_, BxS1(a_, r1_,r2_),BxS2(a_, r1_,r2_))
	BxVxBxS2(c_, b_, a_, r1_,r2_) =
     &    BxVxS2(c_, b_, BxS1(a_, r1_,r2_),BxS2(a_, r1_,r2_))

	SxVxBxVxB1(l1_,l2_, a_, b_, c_, d_) =
     &    SxBxVxB1(SxV1(l1_,l2_, a_),SxV2(l1_,l2_, a_), b_, c_, d_)
	SxVxBxVxB2(l1_,l2_, a_, b_, c_, d_) =
     &    SxBxVxB2(SxV1(l1_,l2_, a_),SxV2(l1_,l2_, a_), b_, c_, d_)

	SxBxVxBxV1(l1_,l2_, a_, b_, c_, d_) =
     &    SxVxBxV1(SxB1(l1_,l2_, a_),SxB2(l1_,l2_, a_), b_, c_, d_)
	SxBxVxBxV2(l1_,l2_, a_, b_, c_, d_) =
     &    SxVxBxV2(SxB1(l1_,l2_, a_),SxB2(l1_,l2_, a_), b_, c_, d_)

	BxVxBxVxS1(d_, c_, b_, a_, r1_,r2_) =
     &    BxVxBxS1(d_, c_, b_, VxS1(a_, r1_,r2_),VxS2(a_, r1_,r2_))
	BxVxBxVxS2(d_, c_, b_, a_, r1_,r2_) =
     &    BxVxBxS2(d_, c_, b_, VxS1(a_, r1_,r2_),VxS2(a_, r1_,r2_))

	VxBxVxBxS1(d_, c_, b_, a_, r1_,r2_) =
     &    VxBxVxS1(d_, c_, b_, BxS1(a_, r1_,r2_),BxS2(a_, r1_,r2_))
	VxBxVxBxS2(d_, c_, b_, a_, r1_,r2_) =
     &    VxBxVxS2(d_, c_, b_, BxS1(a_, r1_,r2_),BxS2(a_, r1_,r2_))

	ChainV0(iL_,eL_, eR_,iR_) = SxS(
     &    SpiLB(iL_,eL_),
     &    SpiRV(eR_,iR_) )
	ChainB0(iL_,eL_, eR_,iR_) = SxS(
     &    SpiLV(iL_,eL_),
     &    SpiRB(eR_,iR_) )

	ChainV1(iL_,eL_, a_, eR_,iR_) = SxS(
     &    SxV1(SpiLB(iL_,eL_), a_),
     &    SxV2(SpiLB(iL_,eL_), a_),
     &    SpiRB(eR_,iR_) )
	ChainB1(iL_,eL_, a_, eR_,iR_) = SxS(
     &    SxB1(SpiLV(iL_,eL_), a_),
     &    SxB2(SpiLV(iL_,eL_), a_),
     &    SpiRV(eR_,iR_) )

	ChainV2(iL_,eL_, a_, b_, eR_,iR_) = SxS(
     &    SxV1(SpiLB(iL_,eL_), a_),
     &    SxV2(SpiLB(iL_,eL_), a_),
     &    BxS1(b_, SpiRV(eR_,iR_)),
     &    BxS2(b_, SpiRV(eR_,iR_)) )
	ChainB2(iL_,eL_, a_, b_, eR_,iR_) = SxS(
     &    SxB1(SpiLV(iL_,eL_), a_),
     &    SxB2(SpiLV(iL_,eL_), a_),
     &    VxS1(b_, SpiRB(eR_,iR_)),
     &    VxS2(b_, SpiRB(eR_,iR_)) )

	ChainV3(iL_,eL_, a_, b_, c_, eR_,iR_) = SxS(
     &    SxVxB1(SpiLB(iL_,eL_), a_, b_),
     &    SxVxB2(SpiLB(iL_,eL_), a_, b_),
     &    VxS1(c_, SpiRB(eR_,iR_)),
     &    VxS2(c_, SpiRB(eR_,iR_)) )
	ChainB3(iL_,eL_, a_, b_, c_, eR_,iR_) = SxS(
     &    SxBxV1(SpiLV(iL_,eL_), a_, b_),
     &    SxBxV2(SpiLV(iL_,eL_), a_, b_),
     &    BxS1(c_, SpiRV(eR_,iR_)),
     &    BxS2(c_, SpiRV(eR_,iR_)) )

	ChainV4(iL_,eL_, a_, b_, c_, d_, eR_,iR_) = SxS(
     &    SxVxB1(SpiLB(iL_,eL_), a_, b_),
     &    SxVxB2(SpiLB(iL_,eL_), a_, b_),
     &    VxBxS1(c_, d_, SpiRV(eR_,iR_)),
     &    VxBxS2(c_, d_, SpiRV(eR_,iR_)) )
	ChainB4(iL_,eL_, a_, b_, c_, d_, eR_,iR_) = SxS(
     &    SxBxV1(SpiLV(iL_,eL_), a_, b_),
     &    SxBxV2(SpiLV(iL_,eL_), a_, b_),
     &    BxVxS1(c_, d_, SpiRB(eR_,iR_)),
     &    BxVxS2(c_, d_, SpiRB(eR_,iR_)) )

	ChainV5(iL_,eL_, a_, b_, c_, d_, e_, eR_,iR_) = SxS(
     &    SxVxBxV1(SpiLB(iL_,eL_), a_, b_, c_),
     &    SxVxBxV2(SpiLB(iL_,eL_), a_, b_, c_),
     &    BxVxS1(d_, e_, SpiRB(eR_,iR_)),
     &    BxVxS2(d_, e_, SpiRB(eR_,iR_)) )
	ChainB5(iL_,eL_, a_, b_, c_, d_, e_, eR_,iR_) = SxS(
     &    SxBxVxB1(SpiLV(iL_,eL_), a_, b_, c_),
     &    SxBxVxB2(SpiLV(iL_,eL_), a_, b_, c_),
     &    VxBxS1(d_, e_, SpiRV(eR_,iR_)),
     &    VxBxS2(d_, e_, SpiRV(eR_,iR_)) )

	ChainV6(iL_,eL_, a_, b_, c_, d_, e_, f_, eR_,iR_) = SxS(
     &    SxVxBxV1(SpiLB(iL_,eL_), a_, b_, c_),
     &    SxVxBxV2(SpiLB(iL_,eL_), a_, b_, c_),
     &    BxVxBxS1(d_, e_, f_, SpiRV(eR_,iR_)),
     &    BxVxBxS2(d_, e_, f_, SpiRV(eR_,iR_)) )
	ChainB6(iL_,eL_, a_, b_, c_, d_, e_, f_, eR_,iR_) = SxS(
     &    SxBxVxB1(SpiLV(iL_,eL_), a_, b_, c_),
     &    SxBxVxB2(SpiLV(iL_,eL_), a_, b_, c_),
     &    VxBxVxS1(d_, e_, f_, SpiRB(eR_,iR_)),
     &    VxBxVxS2(d_, e_, f_, SpiRB(eR_,iR_)) )

	ChainV7(iL_,eL_, a_, b_, c_, d_, e_, f_, g_, eR_,iR_) = SxS(
     &    SxVxBxVxB1(SpiLB(iL_,eL_), a_, b_, c_, d_),
     &    SxVxBxVxB2(SpiLB(iL_,eL_), a_, b_, c_, d_),
     &    VxBxVxS1(e_, f_, g_, SpiRB(eR_,iR_)),
     &    VxBxVxS2(e_, f_, g_, SpiRB(eR_,iR_)) )
	ChainB7(iL_,eL_, a_, b_, c_, d_, e_, f_, g_, eR_,iR_) = SxS(
     &    SxBxVxBxV1(SpiLV(iL_,eL_), a_, b_, c_, d_),
     &    SxBxVxBxV2(SpiLV(iL_,eL_), a_, b_, c_, d_),
     &    BxVxBxS1(e_, f_, g_, SpiRV(eR_,iR_)),
     &    BxVxBxS2(e_, f_, g_, SpiRV(eR_,iR_)) )

	ChainV8(iL_,eL_, a_, b_, c_, d_, e_, f_, g_, h_, eR_,iR_) = SxS(
     &    SxVxBxVxB1(SpiLB(iL_,eL_), a_, b_, c_, d_),
     &    SxVxBxVxB2(SpiLB(iL_,eL_), a_, b_, c_, d_),
     &    VxBxVxBxS1(e_, f_, g_, h_, SpiRV(eR_,iR_)),
     &    VxBxVxBxS2(e_, f_, g_, h_, SpiRV(eR_,iR_)) )
	ChainB8(iL_,eL_, a_, b_, c_, d_, e_, f_, g_, h_, eR_,iR_) = SxS(
     &    SxBxVxBxV1(SpiLV(iL_,eL_), a_, b_, c_, d_),
     &    SxBxVxBxV2(SpiLV(iL_,eL_), a_, b_, c_, d_),
     &    BxVxBxVxS1(e_, f_, g_, h_, SpiRB(eR_,iR_)),
     &    BxVxBxVxS2(e_, f_, g_, h_, SpiRB(eR_,iR_)) )

CNNum	Vec(1,1,q1) = q1in(0) + q1in(3)
CNNum	Vec(2,2,q1) = q1in(0) - q1in(3)
CNNum	Vec(2,1,q1) = q1in(1) + cI*q1in(2)
CNNum	Vec(1,2,q1) = q1in(1) - cI*q1in(2)

CSNum	Vec(1,1,q1) = q1in(4) + q1in(3)
CSNum	Vec(2,2,q1) = q1in(4) - q1in(3)
CSNum	Vec(2,1,q1) = q1in(1) + cI*q1in(2)
CSNum	Vec(1,2,q1) = q1in(1) - cI*q1in(2)
CSNum	muscale = MuTildeSq

CCNum	Vec(1,1,q1) = q1in(0) + q1in(3)
CCNum	Vec(2,2,q1) = q1in(0) - q1in(3)
CCNum	Vec(2,1,q1) = q1in(1) + cI*q1in(2)
CCNum	Vec(1,2,q1) = q1in(1) - cI*q1in(2)

CMuExp	Vec(1,1,vTnj) = vTin(0) + vTin(3)
CMuExp	Vec(2,2,vTnj) = vTin(0) - vTin(3)
CMuExp	Vec(2,1,vTnj) = vTin(1) + cI*vTin(2)
CMuExp	Vec(1,2,vTnj) = vTin(1) - cI*vTin(2)

CT3Exp	Vec(1,1,v0nj) = v0in(0) + v0in(3)
CT3Exp	Vec(2,2,v0nj) = v0in(0) - v0in(3)
CT3Exp	Vec(2,1,v0nj) = v0in(1) + cI*v0in(2)
CT3Exp	Vec(1,2,v0nj) = v0in(1) - cI*v0in(2)
CT3Exp	Vec(1,1,v3nj) = v3in(0) + v3in(3)
CT3Exp	Vec(2,2,v3nj) = v3in(0) - v3in(3)
CT3Exp	Vec(2,1,v3nj) = v3in(1) + cI*v3in(2)
CT3Exp	Vec(1,2,v3nj) = v3in(1) - cI*v3in(2)
CT3Exp	Vec(1,1,v4nj) = v4in(0) + v4in(3)
CT3Exp	Vec(2,2,v4nj) = v4in(0) - v4in(3)
CT3Exp	Vec(2,1,v4nj) = v4in(1) + cI*v4in(2)
CT3Exp	Vec(1,2,v4nj) = v4in(1) - cI*v4in(2)

CT2Exp	Vec(1,1,v1nj) = v1in(0) + v1in(3)
CT2Exp	Vec(2,2,v1nj) = v1in(0) - v1in(3)
CT2Exp	Vec(2,1,v1nj) = v1in(1) + cI*v1in(2)
CT2Exp	Vec(1,2,v1nj) = v1in(1) - cI*v1in(2)
CT2Exp	Vec(1,1,v2nj) = v2in(0) + v2in(3)
CT2Exp	Vec(2,2,v2nj) = v2in(0) - v2in(3)
CT2Exp	Vec(2,1,v2nj) = v2in(1) + cI*v2in(2)
CT2Exp	Vec(1,2,v2nj) = v2in(1) - cI*v2in(2)
CT2Exp	Vec(1,1,v3nj) = v3in(0) + v3in(3)
CT2Exp	Vec(2,2,v3nj) = v3in(0) - v3in(3)
CT2Exp	Vec(2,1,v3nj) = v3in(1) + cI*v3in(2)
CT2Exp	Vec(1,2,v3nj) = v3in(1) - cI*v3in(2)
CT2Exp	Vec(1,1,v4nj) = v4in(0) + v4in(3)
CT2Exp	Vec(2,2,v4nj) = v4in(0) - v4in(3)
CT2Exp	Vec(2,1,v4nj) = v4in(1) + cI*v4in(2)
CT2Exp	Vec(1,2,v4nj) = v4in(1) - cI*v4in(2)

#endif

